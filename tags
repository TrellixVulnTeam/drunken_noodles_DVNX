!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
APPLICATION_DIR	app/config.py	/^    APPLICATION_DIR = os.path.dirname(os.path.realpath(__file__))$/;"	v	class:Configuration
Admin	app/admin.py	/^from flask_admin import Admin$/;"	i
BaseModelView	app/admin.py	/^class BaseModelView(ModelView):$/;"	c
Bcrypt	app/app.py	/^from flask_bcrypt import Bcrypt$/;"	i
BlogFileAdmin	app/admin.py	/^class BlogFileAdmin(FileAdmin):$/;"	c
Blueprint	app/entries/blueprint.py	/^from flask import Blueprint, flash, redirect, render_template, request, url_for, g$/;"	i
Category	app/entries/blueprint.py	/^from models import Entry, Category, Tag$/;"	i
Category	app/entries/forms.py	/^from models import Entry, Category, Tag$/;"	i
Category	app/helpers.py	/^from models import Entry, Category, Tag$/;"	i
Category	app/models.py	/^class Category(db.Model):$/;"	c
Configuration	app/app.py	/^from config import Configuration$/;"	i
Configuration	app/config.py	/^class Configuration(object):$/;"	c
DEBUG	app/config.py	/^    DEBUG = True$/;"	v	class:Configuration
DataRequired	app/entries/forms.py	/^from wtforms.validators import DataRequired$/;"	i
Entry	app/admin.py	/^from models import Entry, Tag, User$/;"	i
Entry	app/entries/blueprint.py	/^from models import Entry, Category, Tag$/;"	i
Entry	app/entries/forms.py	/^from models import Entry, Category, Tag$/;"	i
Entry	app/helpers.py	/^from models import Entry, Category, Tag$/;"	i
Entry	app/models.py	/^class Entry(db.Model):$/;"	c
EntryForm	app/entries/blueprint.py	/^from entries.forms import EntryForm, ImageForm$/;"	i
EntryForm	app/entries/forms.py	/^class EntryForm(wtforms.Form):$/;"	c
EntryModelView	app/admin.py	/^class EntryModelView(SlugModelView):$/;"	c
FileAdmin	app/admin.py	/^from flask_admin.contrib.fileadmin import FileAdmin$/;"	i
Flask	app/app.py	/^from flask import Flask, g$/;"	i
IMAGES_DIR	app/config.py	/^    IMAGES_DIR = os.path.join(STATIC_DIR, 'images')$/;"	v	class:Configuration
IS_JYTHON	bin/activate_this.py	/^IS_JYTHON = sys.platform.startswith("java")$/;"	v
IS_PYPY	bin/activate_this.py	/^IS_PYPY = hasattr(sys, "pypy_version_info")$/;"	v
ImageForm	app/entries/blueprint.py	/^from entries.forms import EntryForm, ImageForm$/;"	i
ImageForm	app/entries/forms.py	/^class ImageForm(wtforms.Form):$/;"	c
LoginForm	app/forms.py	/^class LoginForm(wtforms.Form):$/;"	c
LoginForm	app/views.py	/^from forms import LoginForm$/;"	i
LoginManager	app/app.py	/^from flask_login import LoginManager, current_user$/;"	i
Manager	app/app.py	/^from flask_script import Manager$/;"	i
Migrate	app/app.py	/^from flask_migrate import Migrate, MigrateCommand$/;"	i
MigrateCommand	app/app.py	/^from flask_migrate import Migrate, MigrateCommand$/;"	i
ModelView	app/admin.py	/^from flask_admin.contrib.sqla import ModelView$/;"	i
PasswordField	app/admin.py	/^from wtforms.fields import SelectField, PasswordField$/;"	i
SECRET_KEY	app/config.py	/^    SECRET_KEY = 'cocounut'$/;"	v	class:Configuration
SQLALCHEMY_DATABASE_URI	app/config.py	/^    SQLALCHEMY_DATABASE_URI = 'sqlite:\/\/\/%s\/wiki.db' % APPLICATION_DIR$/;"	v	class:Configuration
SQLAlchemy	app/app.py	/^from flask_sqlalchemy import SQLAlchemy$/;"	i
STATIC_DIR	app/config.py	/^    STATIC_DIR = os.path.join(APPLICATION_DIR, 'static')$/;"	v	class:Configuration
STATUS_DELETED	app/models.py	/^    STATUS_DELETED = 2$/;"	v	class:Entry
STATUS_DRAFT	app/models.py	/^    STATUS_DRAFT = 1$/;"	v	class:Entry
STATUS_PUBLIC	app/models.py	/^    STATUS_PUBLIC = 0$/;"	v	class:Entry
SelectField	app/admin.py	/^from wtforms.fields import SelectField, PasswordField$/;"	i
SlugModelView	app/admin.py	/^class SlugModelView(BaseModelView):$/;"	c
Tag	app/admin.py	/^from models import Entry, Tag, User$/;"	i
Tag	app/entries/blueprint.py	/^from models import Entry, Category, Tag$/;"	i
Tag	app/entries/forms.py	/^from models import Entry, Category, Tag$/;"	i
Tag	app/helpers.py	/^from models import Entry, Category, Tag$/;"	i
Tag	app/models.py	/^class Tag(db.Model):$/;"	c
TagField	app/entries/forms.py	/^class TagField(wtforms.StringField):$/;"	c
User	app/admin.py	/^from models import Entry, Tag, User$/;"	i
User	app/forms.py	/^from models import User$/;"	i
User	app/models.py	/^class User (db.Model):$/;"	c
UserModelView	app/admin.py	/^class UserModelView(ModelView):$/;"	c
__init__	app/models.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Category
__init__	app/models.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Entry
__init__	app/models.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Tag
__init__	app/models.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:User
__repr__	app/models.py	/^    def __repr__(self):$/;"	m	class:Category	file:
__repr__	app/models.py	/^    def __repr__(self):$/;"	m	class:Entry	file:
__repr__	app/models.py	/^    def __repr__(self):$/;"	m	class:Tag	file:
_before_request	app/app.py	/^def _before_request():$/;"	f
_status_choices	app/admin.py	/^    _status_choices = [(choice, label) for choice, label in [$/;"	v	class:EntryModelView
_user_loader	app/models.py	/^def _user_loader(user_id):$/;"	f
_value	app/entries/forms.py	/^    def _value(self):$/;"	m	class:TagField
active	app/models.py	/^    active = db.Column(db.Boolean, default=True)$/;"	v	class:User
admin	app/admin.py	/^admin = Admin(app, 'Wiki Admin')$/;"	v
admin	app/main.py	/^import admin$/;"	i
app	app/admin.py	/^from app import app, db$/;"	i
app	app/app.py	/^app = Flask(__name__)$/;"	v
app	app/entries/blueprint.py	/^from app import app, db$/;"	i
app	app/main.py	/^from app import app, db$/;"	i
app	app/views.py	/^from app import app$/;"	i
authenticate	app/models.py	/^    def authenticate(email, password):$/;"	m	class:User
author_id	app/models.py	/^    author_id = db.Column(db.Integer, db.ForeignKey("user.id"))$/;"	v	class:Entry
backref	app/models.py	/^            backref = db.backref('entries', lazy='dynamic'))$/;"	v	class:Entry
base	bin/activate_this.py	/^base = os.path.dirname(bin_dir)$/;"	v
bcrypt	app/app.py	/^bcrypt = Bcrypt(app)$/;"	v
bcrypt	app/models.py	/^from app import db, login_manager, bcrypt$/;"	i
bin_dir	bin/activate_this.py	/^bin_dir = os.path.dirname(os.path.abspath(__file__))$/;"	v
body	app/entries/forms.py	/^    body = wtforms.TextAreaField($/;"	v	class:EntryForm
body	app/models.py	/^    body = db.Column(db.Text)$/;"	v	class:Entry
categories	app/models.py	/^    categories = db.relationship('Category', secondary = entry_categories,$/;"	v	class:Entry
category_detail	app/entries/blueprint.py	/^def category_detail(slug):$/;"	f
category_index	app/entries/blueprint.py	/^def category_index():$/;"	f
check_password	app/models.py	/^    def check_password(self, raw_password):$/;"	m	class:User
choices	app/entries/forms.py	/^        choices=($/;"	v	class:EntryForm
coerce	app/entries/forms.py	/^        coerce=int)$/;"	v	class:EntryForm
column_choices	app/admin.py	/^    column_choices = {$/;"	v	class:EntryModelView
column_filters	app/admin.py	/^    column_filters = ('email', 'name', 'active')$/;"	v	class:UserModelView
column_filters	app/admin.py	/^    column_filters = [ $/;"	v	class:EntryModelView
column_list	app/admin.py	/^    column_list = [$/;"	v	class:EntryModelView
column_list	app/admin.py	/^    column_list = ['email', 'name', 'active', 'created_timestamp']$/;"	v	class:UserModelView
column_searchable_list	app/admin.py	/^    column_searchable_list = ['email', 'name']$/;"	v	class:UserModelView
column_searchable_list	app/admin.py	/^    column_searchable_list = ['title', 'body']$/;"	v	class:EntryModelView
column_select_related_list	app/admin.py	/^    column_select_related_list = ['author']$/;"	v	class:EntryModelView
create	app/entries/blueprint.py	/^def create():$/;"	f
create	app/models.py	/^    def create(cls, email, password, **kwargs):$/;"	m	class:User
create_post	app/entries/blueprint.py	/^def create_post():$/;"	f
created_timestamp	app/models.py	/^    created_timestamp = db.Column(db.DateTime, default = datetime.datetime.now)$/;"	v	class:Entry
created_timestamp	app/models.py	/^    created_timestamp = db.Column(db.DateTime, default=datetime.datetime.now)$/;"	v	class:User
current_user	app/app.py	/^from flask_login import LoginManager, current_user$/;"	i
datetime	app/models.py	/^import datetime, re$/;"	i
db	app/admin.py	/^from app import app, db$/;"	i
db	app/app.py	/^db = SQLAlchemy(app)$/;"	v
db	app/entries/blueprint.py	/^from app import app, db$/;"	i
db	app/main.py	/^from app import app, db$/;"	i
db	app/models.py	/^from app import db, login_manager, bcrypt$/;"	i
db	app/scripts/create_db.py	/^from main import db$/;"	i
default	app/forms.py	/^        default=True)$/;"	v	class:LoginForm
default	app/models.py	/^    default = datetime.datetime.now,$/;"	v	class:Entry
delete	app/entries/blueprint.py	/^def delete(slug):$/;"	f
description	app/entries/forms.py	/^        description='Seperate multiple tags with commas.')$/;"	v	class:EntryForm
detail	app/entries/blueprint.py	/^def detail(slug): $/;"	f
edit	app/entries/blueprint.py	/^def edit(slug):$/;"	f
edit_entry	app/entries/blueprint.py	/^def edit_entry(slug):$/;"	f
email	app/forms.py	/^    email = wtforms.StringField("Email",$/;"	v	class:LoginForm
email	app/models.py	/^    email = db.Column(db.String(64), unique=True)$/;"	v	class:User
entries	app/entries/blueprint.py	/^entries = Blueprint('entries', __name__,$/;"	v
entries	app/main.py	/^from entries.blueprint import entries$/;"	i
entries	app/models.py	/^    entries = db.relationship('Entry', backref='author', lazy='dynamic')$/;"	v	class:User
entry_categories	app/models.py	/^entry_categories = db.Table('entry_categories',$/;"	v
entry_list	app/entries/blueprint.py	/^from helpers import object_list, entry_list, get_entry_or_404$/;"	i
entry_list	app/helpers.py	/^def entry_list(template, query, **context):$/;"	f
entry_tags	app/models.py	/^entry_tags = db.Table('entry_tags',$/;"	v
exit_with_usage	bin/python-config	/^def exit_with_usage(code=1):$/;"	f
file	app/entries/forms.py	/^    file = wtforms.FileField('Image file')$/;"	v	class:ImageForm
filter_status_by_user	app/helpers.py	/^def filter_status_by_user(query):$/;"	f
flash	app/entries/blueprint.py	/^from flask import Blueprint, flash, redirect, render_template, request, url_for, g$/;"	i
flash	app/views.py	/^from flask import flash, redirect, render_template, request, url_for$/;"	i
form_ajax_refs	app/admin.py	/^    form_ajax_refs = {$/;"	v	class:EntryModelView
form_args	app/admin.py	/^    form_args = {$/;"	v	class:EntryModelView
form_columns	app/admin.py	/^    form_columns = ['email', 'password', 'name', 'active']$/;"	v	class:UserModelView
form_columns	app/admin.py	/^    form_columns = ['title', 'body', 'status', 'author', 'tags']$/;"	v	class:EntryModelView
form_extra_fields	app/admin.py	/^    form_extra_fields = {$/;"	v	class:UserModelView
form_overrides	app/admin.py	/^    form_overrides = {'status': SelectField}$/;"	v	class:EntryModelView
g	app/app.py	/^from flask import Flask, g$/;"	i
g	app/entries/blueprint.py	/^from flask import Blueprint, flash, redirect, render_template, request, url_for, g$/;"	i
g	app/helpers.py	/^from flask import render_template, request, g$/;"	i
generate_slug	app/models.py	/^    def generate_slug(self):$/;"	m	class:Entry
generate_slug	app/models.py	/^    def generate_slug(self):$/;"	m	class:User
get_entry_or_404	app/entries/blueprint.py	/^from helpers import object_list, entry_list, get_entry_or_404$/;"	i
get_entry_or_404	app/helpers.py	/^def get_entry_or_404(slug, author=None):$/;"	f
get_id	app/models.py	/^    def get_id(self):$/;"	m	class:User
get_tags_from_string	app/entries/forms.py	/^    def get_tags_from_string(self, tag_string):$/;"	m	class:TagField
getopt	bin/python-config	/^import getopt$/;"	i
getvar	bin/python-config	/^getvar = sysconfig.get_config_var$/;"	v
homepage	app/views.py	/^def homepage():$/;"	f
id	app/models.py	/^    id = db.Column(db.Integer, primary_key = True)$/;"	v	class:Category
id	app/models.py	/^    id = db.Column(db.Integer, primary_key = True)$/;"	v	class:Tag
id	app/models.py	/^    id = db.Column(db.Integer, primary_key = True)$/;"	v	class:User
id	app/models.py	/^    id = db.Column(db.Integer, primary_key=True)$/;"	v	class:Entry
image_upload	app/entries/blueprint.py	/^def image_upload():$/;"	f
index	app/entries/blueprint.py	/^def index():$/;"	f
is_active	app/models.py	/^    def is_active(self):$/;"	m	class:User
is_anonymous	app/models.py	/^    def is_anonymous(self):$/;"	m	class:User
is_authenticated	app/models.py	/^    def is_authenticated(self):$/;"	m	class:User
login	app/views.py	/^def login():$/;"	f
login_manager	app/app.py	/^login_manager = LoginManager(app)$/;"	v
login_manager	app/models.py	/^from app import db, login_manager, bcrypt$/;"	i
login_manager	app/views.py	/^from app import login_manager$/;"	i
login_required	app/entries/blueprint.py	/^from flask_login import login_required$/;"	i
login_user	app/views.py	/^from flask_login import login_user, logout_user$/;"	i
logout	app/views.py	/^def logout():$/;"	f
logout_user	app/views.py	/^from flask_login import login_user, logout_user$/;"	i
make_password	app/models.py	/^    def make_password(plaintext):$/;"	m	class:User
manager	app/app.py	/^manager = Manager(app)$/;"	v
manager	app/manage.py	/^from app import manager$/;"	i
migrate	app/app.py	/^migrate = Migrate(app, db)$/;"	v
models	app/main.py	/^import models$/;"	i
modified_timestamp	app/models.py	/^    modified_timestamp = db.Column(db.DateTime, $/;"	v	class:Entry
name	app/models.py	/^    name = db.Column(db.String(64))$/;"	v	class:Category
name	app/models.py	/^    name = db.Column(db.String(64))$/;"	v	class:Tag
name	app/models.py	/^    name = db.Column(db.String(64))$/;"	v	class:User
new	bin/activate_this.py	/^new = list(sys.path)$/;"	v
object_list	app/entries/blueprint.py	/^from helpers import object_list, entry_list, get_entry_or_404$/;"	i
object_list	app/helpers.py	/^def object_list(template_name, query, paginate_by=5, **context):$/;"	f
on_model_change	app/admin.py	/^    def on_model_change(self, form, model, is_created):$/;"	m	class:SlugModelView
on_model_change	app/admin.py	/^    def on_model_change(self, form, model, is_created):$/;"	m	class:UserModelView
onupdate	app/models.py	/^    onupdate = datetime.datetime.now)$/;"	v	class:Entry
opt_flags	bin/python-config	/^opt_flags = [flag for (flag, val) in opts]$/;"	v
os	app/config.py	/^import os$/;"	i
os	app/entries/blueprint.py	/^import os$/;"	i
os	app/scripts/create_db.py	/^import os, sys$/;"	i
os	bin/activate_this.py	/^import os$/;"	i
password	app/forms.py	/^    password = wtforms.PasswordField("Password",$/;"	v	class:LoginForm
password_hash	app/models.py	/^    password_hash = db.Column(db.String(255))$/;"	v	class:User
prev	bin/activate_this.py	/^prev = set(sys.path)$/;"	v
process_formdata	app/entries/forms.py	/^    def process_formdata(self, valuelist):$/;"	m	class:TagField
pyver	bin/python-config	/^pyver = sysconfig.get_config_var('VERSION')$/;"	v
re	app/models.py	/^import datetime, re$/;"	i
redirect	app/entries/blueprint.py	/^from flask import Blueprint, flash, redirect, render_template, request, url_for, g$/;"	i
redirect	app/views.py	/^from flask import flash, redirect, render_template, request, url_for$/;"	i
remember_me	app/forms.py	/^    remember_me = wtforms.BooleanField("Remember me?",$/;"	v	class:LoginForm
render_template	app/entries/blueprint.py	/^from flask import Blueprint, flash, redirect, render_template, request, url_for, g$/;"	i
render_template	app/helpers.py	/^from flask import render_template, request, g$/;"	i
render_template	app/views.py	/^from flask import flash, redirect, render_template, request, url_for$/;"	i
request	app/entries/blueprint.py	/^from flask import Blueprint, flash, redirect, render_template, request, url_for, g$/;"	i
request	app/helpers.py	/^from flask import render_template, request, g$/;"	i
request	app/views.py	/^from flask import flash, redirect, render_template, request, url_for$/;"	i
save_entry	app/entries/forms.py	/^    def save_entry(self, entry):$/;"	m	class:EntryForm
secure_filename	app/entries/blueprint.py	/^from werkzeug import secure_filename$/;"	i
site	bin/activate_this.py	/^import site$/;"	i
site_packages	bin/activate_this.py	/^        site_packages = os.path.join(base, "Lib", "site-packages")$/;"	v
site_packages	bin/activate_this.py	/^        site_packages = os.path.join(base, "lib", "python{}".format(sys.version[:3]), "site-packages")$/;"	v
site_packages	bin/activate_this.py	/^    site_packages = os.path.join(base, "Lib", "site-packages")$/;"	v
site_packages	bin/activate_this.py	/^    site_packages = os.path.join(base, "site-packages")$/;"	v
slug	app/models.py	/^    slug = db.Column(db.String(100), unique=True)$/;"	v	class:Entry
slug	app/models.py	/^    slug = db.Column(db.String(64), unique = True)$/;"	v	class:Category
slug	app/models.py	/^    slug = db.Column(db.String(64), unique = True)$/;"	v	class:Tag
slug	app/models.py	/^    slug = db.Column(db.String(64), unique=True)$/;"	v	class:User
slugify	app/models.py	/^def slugify(str):$/;"	f
status	app/entries/forms.py	/^    status = wtforms.SelectField($/;"	v	class:EntryForm
status	app/models.py	/^    status = db.Column(db.SmallInteger, default=STATUS_PUBLIC)$/;"	v	class:Entry
sys	app/scripts/create_db.py	/^import os, sys$/;"	i
sys	bin/activate_this.py	/^import sys$/;"	i
sys	bin/python-config	/^import sys$/;"	i
sysconfig	bin/python-config	/^import sysconfig$/;"	i
tag_detail	app/entries/blueprint.py	/^def tag_detail(slug):$/;"	f
tag_index	app/entries/blueprint.py	/^def tag_index():$/;"	f
tag_list	app/models.py	/^    def tag_list(self):$/;"	m	class:Entry
tags	app/entries/forms.py	/^    tags = TagField($/;"	v	class:EntryForm
tags	app/models.py	/^    tags = db.relationship('Tag', secondary = entry_tags,$/;"	v	class:Entry
tease	app/models.py	/^    def tease(self):$/;"	m	class:Entry
template_folder	app/entries/blueprint.py	/^template_folder='templates')$/;"	v
title	app/entries/forms.py	/^    title = wtforms.StringField($/;"	v	class:EntryForm
title	app/models.py	/^    title = db.Column(db.String(100))$/;"	v	class:Entry
url_for	app/entries/blueprint.py	/^from flask import Blueprint, flash, redirect, render_template, request, url_for, g$/;"	i
url_for	app/views.py	/^from flask import flash, redirect, render_template, request, url_for$/;"	i
valid_opts	bin/python-config	/^valid_opts = ['prefix', 'exec-prefix', 'includes', 'libs', 'cflags',$/;"	v
validate	app/forms.py	/^    def validate(self):$/;"	m	class:LoginForm
validators	app/entries/forms.py	/^     validators=[DataRequired()])$/;"	v	class:EntryForm
validators	app/forms.py	/^        validators=[validators.DataRequired()])$/;"	v	class:LoginForm
validators	app/forms.py	/^from wtforms import validators$/;"	i
views	app/main.py	/^import views$/;"	i
wtforms	app/entries/forms.py	/^import wtforms$/;"	i
wtforms	app/forms.py	/^import wtforms$/;"	i
